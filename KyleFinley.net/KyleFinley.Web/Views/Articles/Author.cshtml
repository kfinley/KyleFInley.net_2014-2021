
@model AuthorViewData<Article>

@{
    Model.Title = (Model.AuthorMode == AuthorMode.Create) ? "Create Article" : "Edit: " + Model.Page.Entity.Name;
}
<div class="row">
    <div class="col-md-12">
        <h1>@Model.Title</h1>
        <div>
            @Html.ActionLink("Back to List", "Index")
        </div>
        @if (Model.Saved)
        {
            <h2 class="alert-success">Article Saved</h2>
        }
    </div>
</div>

@if (Model.AuthorMode == AuthorMode.Review)
{
    @Html.Partial("ShortUrlClicks", Model.Page)
}

<div class="row section">
    <div class="col-md-12 section-header">
        Article Details &amp; Settings
    </div>
    <form id="articleForm" class="col-md-12" @(Model.Id.HasValue() ? $"data-id={Model.Id} data-entityid={Model.Page.Entity.Id}" : string.Empty)>
        @Html.AntiForgeryToken()
        <div class="row">
            <div class="col-md-7 form-group">
                @Html.LabelFor(model => model.Page.Title, htmlAttributes: new { @class = "col-md-7" })
                @Html.EditorFor(model => model.Page.Title, new { htmlAttributes = new { @class = "form-control" } })
            </div>
            <div class="col-md-5 form-group">
                
                @using (Html.BeginLabelFor(model => model.Page.Enabled, new { @class = "checkbox" }))
                {
                    @Html.CheckBoxFor(model => model.Page.Enabled)
                }
                @using (Html.BeginLabelFor(model => model.Page.Entity.ContainsCode, "Contains Code", new { @class = "checkbox" }))
                {
                    @Html.CheckBoxFor(model => model.Page.Entity.ContainsCode)
                }
            </div>
        </div>
        <div class="row">
            <div class="col-md-12 form-group">
                @Html.LabelFor(model => model.Page.Description, htmlAttributes: new { @class = "col-md-12" })
                @Html.EditorFor(model => model.Page.Description, new { htmlAttributes = new { @class = "form-control" } })
            </div>
        </div>
        <div class="row">
            <div class="col-md-6 form-group">
                @Html.LabelFor(model => model.Url, htmlAttributes: new { @class = "col-md-6" })
                @if (Model.AuthorMode == AuthorMode.Create)
                {
                    @Html.EditorFor(model => model.Url, new { htmlAttributes = new { @class = "form-control" } })
                }
                else {
                    @Html.EditorFor(model => model.Url, new { htmlAttributes = new { @class = "form-control", disabled = "disabled" } })
                }
            </div>
            <div class="col-md-6 form-group">
                @Html.LabelFor(model => model.Page.PageImage, htmlAttributes: new { @class = "col-md-6" })
                @Html.EditorFor(model => model.Page.PageImage, new { htmlAttributes = new { @class = "form-control" } })
            </div>
        </div>
        <div class="row">
            @Html.LabelFor(model => model.Page.Content, "Article Content", new { @class = "col-md-12" })
            <div class="col-md-12 form-group">
                @Html.TextAreaFor(model => model.Page.Content, new { @class = "form-control", style = "width: 100%; height: 500px;" })
            </div>
        </div>
        <div class="row">
            <div class="col-md-12 form-group ">
                <input id="btnSaveArticle" type="submit" value="Save Article" class="btn btn-default" />
                <input type="button" value="Save New Version" class="btn btn-default" />
            </div>
        </div>
    </form>
</div>


<div>
    @Html.ActionLink("Back to List", "Index")
</div>

@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
    <script type="text/javascript">
        $(document).ready(function () {
            $("form").unobtrusiveBootstrapValidation();

            $("#articleForm").submit(function (e) {
                e.preventDefault();
                disableElement($("#btnSaveArticle"));
                $("#saveError").remove();
                $("#saveMessage").remove();
                
                var $form = $(this);
                if (!$form.valid()) {
                    enableElement($("#btnSaveArticle"));
                    return false;
                }

                var article = $form.serializeToObject();
                
                if ($(this).data("id")) {
                    article["Page.Id"] = $(this).data("id");
                    article["Page.Entity.Id"] = $(this).data("entityid");
                }

                $.post($form.attr("action"), article, function (data, status) {
                    if (status == "success") {
                        var successMessage = "<div id='saveMessage' class='label-success text-center' style='padding: 5px;'>{0}</div>".format(data.Message);
                        $(successMessage).insertAfter($("#btnSaveArticle").closest(".form-group"));
                    }
                }).fail(function (xhr, error) {
                    handleAjaxFail(xhr, error);
                }).always(function (data) {
                    enableElement($("#btnSaveArticle"));
                });
            });
        });
    </script>
}
